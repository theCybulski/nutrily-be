generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // AUTH
  email            String   @unique
  hash             String
  // USER
  firstName        String?
  lastName         String?
  // SESSION
  refreshTokenHash String?

  @@map("users")
}

model Nutrition {
  id           String      @id @default(nanoid())
  // MACROS
  kcal         Float
  carbs        Float
  fat          Float
  protein      Float
  // MICROS
  fiber        Float?
  fe           Float?
  ca           Float?
  mg           Float?
  vitC         Float?
  vitK         Float?
  vitA         Float?
  //
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String?     @unique
  //
  recipe       Recipe?     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String?     @unique

  @@map("nutritions")
}

enum Measure {
  GRAMS
  MILILITERS
}

model Ingredient {
  id        String             @id @default(nanoid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  name      String             @unique
  measure   Measure
  //
  nutrition Nutrition?
  recipes   RecipeIngredient[]

  @@map("ingredients")
}

model Recipe {
  id              String             @id @default(uuid())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  name            String             @unique
  instructions    String
  preparationTime Int?
  nutrition       Nutrition?
  ingredients     RecipeIngredient[]

  @@map("recipes")
}

model RecipeIngredient {
  id              String             @id @default(uuid())
  amount          Float
  //
  ingredient      Ingredient         @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId    String
  //
  recipe          Recipe             @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId        String
  //
  substitutes     RecipeIngredient[] @relation("Substitute")
  substituteForId String?
  substituteFor   RecipeIngredient?  @relation("Substitute", fields: [substituteForId], references: [id])

  @@unique([recipeId, ingredientId])
  @@unique([recipeId, ingredientId, substituteForId])
  @@map("recipe_ingredients")
}
